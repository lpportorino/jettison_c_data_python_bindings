name: Update Panopticon and Generate Docs

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  update-all:
    name: Generate Docs and Update Panopticon
    runs-on: ubuntu-latest
    # Skip if commit message contains any CI skip pattern to avoid loops
    if: |
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[no ci]') &&
      !contains(github.event.head_commit.message, '[skip actions]') &&
      !contains(github.event.head_commit.message, '[actions skip]')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Need full history for getting latest commit

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Generate structure documentation
        run: |
          echo "Generating structure documentation..."
          python3 introspect_bindings.py

      - name: Check for documentation changes
        id: check-changes
        run: |
          if git diff --quiet jon_gui_state.json jon_gui_state.md; then
            echo "No documentation changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Documentation changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit documentation if changed
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

          git add jon_gui_state.json jon_gui_state.md
          git commit -m "docs: Auto-generate structure documentation [skip ci]" \
                     -m "Auto-generated by introspect_bindings.py" \
                     -m "This commit updates the jon_gui_state structure documentation"

          git push origin ${{ github.ref }}

          # Get the new commit hash after documentation update
          echo "NEW_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Get current commit if no doc changes
        if: steps.check-changes.outputs.has_changes != 'true'
        run: |
          echo "NEW_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Setup SSH for deployment key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PUSH_TO_PANOPTICON }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          cat >>~/.ssh/config <<EOF
          Host github.com
              HostName github.com
              User git
              IdentityFile ~/.ssh/deploy_key
              StrictHostKeyChecking no
          EOF

      - name: Clone Panopticon repository
        run: |
          git clone git@github.com:lpportorino/jettison_panopticon.git panopticon
          cd panopticon
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Update submodule to latest commit
        run: |
          cd panopticon

          # Initialize the submodule
          git submodule init c_data_python_bindings

          # Update submodule with SSH URL for proper authentication
          git config submodule.c_data_python_bindings.url git@github.com:lpportorino/jettison_c_data_python_bindings.git

          # Fetch and checkout the latest commit from the submodule repository
          git submodule update --remote c_data_python_bindings

          # Now update to our specific commit
          cd c_data_python_bindings
          git fetch origin
          git checkout ${{ env.NEW_COMMIT }}
          cd ..

          # Check if there are any changes
          if git diff --quiet c_data_python_bindings; then
            echo "Submodule is already up to date"
            exit 0
          fi

          # Stage the submodule update
          git add c_data_python_bindings

          # Commit with descriptive message (NO [skip ci] - we want panopticon to rebuild)
          git commit -m "Update Python bindings to ${NEW_COMMIT:0:8}" \
                     -m "Auto-updated by jettison_c_data_python_bindings CI" \
                     -m "This update includes the latest Python bindings and documentation."

      - name: Push changes to Panopticon
        run: |
          cd panopticon
          # Push the update without [skip ci] so Panopticon rebuilds with fresh docs
          git push origin main || git push origin master